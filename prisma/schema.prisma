// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(cuid()) @map("_id")
  first_name      String
  last_name       String
  nin             String?
  email           String         @unique
  password        String
  phone_number    String
  Farmer          FarmerProfile? @relation(fields: [farmerProfile], references: [id])
  farmerProfile   String?
  workerProfile   WorkerProfile? @relation(fields: [workerProfileId], references: [id])
  workerProfileId String?
  adminProfile    AdminProfile?  @relation(fields: [adminProfileId], references: [id])
  adminProfileId  String?
  type            UserType       @default(EXTENSION_WORKER)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

// TODO add different profiles for users
model FarmerProfile {
  id                String           @id @default(cuid()) @map("_id")
  age               Int
  sex               Gender
  address           Json
  birthday          DateTime?
  income            IncomeRange
  nextOfKin         Json?
  farmSize          Json?
  bioData           Json?
  religion          Religion
  maritalStatus     Marital
  about             String?
  photo             String?
  User              User[]
  enrolled_projects String[]
  household         HouseHold[]
  Cooperative       Cooperative?     @relation(fields: [cooperativeId], references: [id])
  cooperativeId     String?
  Milestone         Milestone[]      @relation(fields: [milestoneId], references: [id])
  milestoneId       String[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  Intervention      Intervention[]
  Project           Project[]        @relation(fields: [projectIds], references: [id])
  projectIds        String[]
  logins            Login[]
  lga               LocalGovernment? @relation(fields: [localGovernmentId], references: [id])
  localGovernmentId String?
  Visit             Visit[]
  createdBy         String?
}

model WorkerProfile {
  id                String           @id @default(cuid()) @map("_id")
  age               Int
  sex               Gender
  birthday          DateTime?
  nextOfKin         Json?
  address           Json
  religion          Religion
  maritalStatus     Marital
  User              User[]
  projects          Project[]
  lga               String?
  assigned_to       LocalGovernment? @relation(fields: [localGovernmentId], references: [id])
  localGovernmentId String?
  reports           Report[]
  reset             PasswordReset[]
  about             String?
  photo             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  Cooperative       Cooperative[]
  Visit             Visit[]
  Challenge         Challenge[]
  Appointment       Appointment[]
}

model AdminProfile {
  id            String          @id @default(cuid()) @map("_id")
  age           Int?
  birthday      DateTime?
  sex           Gender?
  address       Json?
  religion      Religion?
  maritalStatus Marital?
  about         String?
  photo         String?
  reset         PasswordReset[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  User          User[]
}

model Project {
  id                String           @id @default(cuid()) @map("_id")
  name              String?
  location          String?
  description       String?
  vists             Visit[]
  status            ProjectStatus
  type              ProjectType
  participants      FarmerProfile[]  @relation(fields: [farmerProfileId], references: [id])
  farmerProfileId   String[]
  milestones        Milestone[]
  interventions     Intervention[]
  start_date        DateTime
  end_date          DateTime
  WorkerProfile     WorkerProfile?   @relation(fields: [workerProfileId], references: [id])
  workerProfileId   String?          @unique
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  Cooperative       Cooperative?     @relation(fields: [cooperativeId], references: [id])
  cooperativeId     String?
  lga               LocalGovernment? @relation(fields: [localGovernmentId], references: [id])
  localGovernmentId String?
}

model Cooperative {
  id                String           @id @default(cuid()) @map("_id")
  name              String?
  location          String?
  custom_fields     Json?
  animal_type       String?
  certificate       String?
  lga               LocalGovernment? @relation(fields: [localGovernmentId], references: [id])
  localGovernmentId String?
  farmers           FarmerProfile[]
  projects          Project[]
  visits            String[]
  milestones        String[]
  project           String[]
  interventions     String[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  WorkerProfile     WorkerProfile?   @relation(fields: [workerProfileId], references: [id])
  workerProfileId   String?          @unique
}

model Crop {
  id        String   @id @default(cuid()) @map("_id")
  type      CropType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Milestone {
  id               String          @id @default(cuid()) @map("_id")
  Farmer           FarmerProfile[] @relation(fields: [farmerProfile], references: [id])
  farmerProfile    String[]
  text             String
  start_date       DateTime?
  end_date         DateTime?
  isAchieved       Boolean         @default(false)
  custom_field     Json            @default("{}")
  recommendation   Recommendation? @relation(fields: [recommendationId], references: [id])
  recommendationId String?
  progress         Float           @default(0.00)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  Project          Project?        @relation(fields: [projectId], references: [id])
  projectId        String?
  Visit            Visit?          @relation(fields: [visitId], references: [id])
  visitId          String?
}

model Report {
  id              String         @id @default(cuid()) @map("_id")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  WorkerProfile   WorkerProfile? @relation(fields: [workerProfileId], references: [id])
  workerProfileId String?        @unique
}

model Login {
  id              String         @id @default(cuid()) @map("_id")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  FarmerProfile   FarmerProfile? @relation(fields: [farmerProfileId], references: [id])
  farmerProfileId String?
}

model PasswordReset {
  id              String         @id @default(cuid()) @map("_id")
  resetToken      String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  WorkerProfile   WorkerProfile? @relation(fields: [workerProfileId], references: [id])
  workerProfileId String?
  AdminProfile    AdminProfile?  @relation(fields: [adminProfileId], references: [id])
  adminProfileId  String?
}

model HouseHold {
  id              String         @id @default(cuid()) @map("_id")
  number          Int
  size            Int
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  FarmerProfile   FarmerProfile? @relation(fields: [farmerProfileId], references: [id])
  farmerProfileId String?
}

model Recommendation {
  id        String      @id @default(cuid()) @map("_id")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Milestone Milestone[]
}

model Input {
  id        String    @id @default(cuid()) @map("_id")
  type      InputType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model SubCategory {
  id             String             @id @default(cuid()) @map("_id")
  name           String?
  type           Intervention_type?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  Intervention   Intervention?      @relation(fields: [interventionId], references: [id])
  interventionId String?
}

model Photo {
  id        String   @id @default(cuid()) @map("_id")
  data      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Visit     Visit?   @relation(fields: [visitId], references: [id])
  visitId   String?
}

model Visit {
  id              String         @id @default(cuid()) @map("_id")
  name            String?
  status          VisitStatus
  appointment     Appointment    @relation(fields: [appointmentId], references: [id])
  milestoneId     String
  appointmentId   String
  photos          Photo[]
  to              DateTime?      @default(now())
  from            DateTime       @default(now())
  milestone       Milestone[]
  challenge       Challenge[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  Project         Project?       @relation(fields: [projectId], references: [id])
  projectId       String?
  worker          WorkerProfile? @relation(fields: [workerProfileId], references: [id])
  workerProfileId String?
  farmer          FarmerProfile? @relation(fields: [farmerProfileId], references: [id])
  farmerProfileId String?
  intervention    Intervention?  @relation(fields: [interventionId], references: [id])
  interventionId  String?
}

model Challenge {
  id              String         @id @default(cuid()) @map("_id")
  type            ChallengeType
  worker          WorkerProfile? @relation(fields: [workerProfileId], references: [id])
  workerProfileId String?
  custom_fields   Json           @default("{}")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  Visit           Visit?         @relation(fields: [visitId], references: [id])
  visitId         String?
}

model Appointment {
  id              String             @id @default(cuid()) @map("_id")
  time            DateTime
  status          Appointment_Status
  Visit           Visit[]
  worker          WorkerProfile      @relation(fields: [workerProfileId], references: [id])
  workerProfileId String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model LocalGovernment {
  id            String          @id @default(cuid()) @map("_id")
  name          String          @unique()
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Cooperative   Cooperative[]
  FarmerProfile FarmerProfile[]
  worker        WorkerProfile[]
  Project       Project[]
}

model Intervention {
  id              String            @id @default(cuid()) @map("_id")
  amount          Float             @default(0.00)
  subCategory     SubCategory[]
  custom_field    Json
  type            Intervention_type
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  FarmerProfile   FarmerProfile?    @relation(fields: [farmerProfileId], references: [id])
  farmerProfileId String?
  Project         Project?          @relation(fields: [projectId], references: [id])
  projectId       String?
  Visit           Visit[]
}

enum UserType {
  ADMIN
  FARMER
  EXTENSION_WORKER
}

enum ChallengeType {
  PEST_INFESTATION
  SOIL_DEGRADATION
}

enum CropType {
  ADMIN
  FARMER
  EXTENSION_WORKER
}

enum Gender {
  MALE
  FEMALE
}

enum InputType {
  CASH
  FERTILIZER
}

enum Religion {
  CHRISTIAN
  MUSLIM
  NOT_SPECIFIED
}

enum Marital {
  MARRIED
  UNMARRIED
}

enum ProjectType {
  CROP
  LIVESTOCK
  ALL
}

enum VisitStatus {
  COMPLETED
  UNCOMPLETED
}

enum Appointment_Status {
  PENDING
  COMPLETED
  MISSED
}

enum IncomeRange {
  SMALL
  MEDIUM
  COMMERCIAL
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}

enum Intervention_type {
  CASH
  CROP
  LIVESTOCK
  MACHINE
  OTHER
}
