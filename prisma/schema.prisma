// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(uuid()) @map("_id")
  first_name      String
  last_name       String
  email           String         @unique
  password        String
  phone_number    String
  Farmer          FarmerProfile? @relation(fields: [farmerProfile], references: [id])
  farmerProfile   String?
  workerProfile   WorkerProfile? @relation(fields: [workerProfileId], references: [id])
  workerProfileId String?
  type            UserType       @default(EXTENSION_WORKER)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

// TODO add different profiles for users
model FarmerProfile {
  id            String         @id @default(uuid()) @map("_id")
  age           Int
  sex           Gender
  address       Json
  birthday      DateTime
  income        IncomeRange
  religion      Religion
  maritalStatus Marital
  Project       Project?       @relation(fields: [projectId], references: [id])
  projectId     String?
  about         String?
  photo         Bytes?
  User          User[]
  household     HouseHold[]
  Cooperative   Cooperative?   @relation(fields: [cooperativeId], references: [id])
  cooperativeId String?
  Milestone     Milestone[]    @relation(fields: [milestoneId], references: [id])
  milestoneId   String[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Disbursement  Disbursement[]
}

model WorkerProfile {
  id            String        @id @default(uuid()) @map("_id")
  age           Int
  sex           Gender
  birthday      DateTime
  address       Json
  religion      Religion
  maritalStatus Marital
  User          User[]
  projects      Project[]
  reports       Report[]
  about         String?
  photo         Bytes?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Cooperative   Cooperative[]
}

model AdminProfile {
  id            String   @id @default(uuid()) @map("_id")
  age           Int
  birthday      DateTime
  sex           Gender
  address       Json
  religion      Religion
  maritalStatus Marital
  about         String?
  photo         Bytes?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Project {
  id              String          @id @default(uuid()) @map("_id")
  type            ProjectType
  participants    FarmerProfile[]
  milestones      Milestone[]
  start_date      DateTime
  end_date        DateTime
  WorkerProfile   WorkerProfile?  @relation(fields: [workerProfileId], references: [id])
  workerProfileId String?         @unique
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Cooperative {
  id              String          @id @default(uuid()) @map("_id")
  farmers         FarmerProfile[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  WorkerProfile   WorkerProfile?  @relation(fields: [workerProfileId], references: [id])
  workerProfileId String?         @unique
}

model Crop {
  id        String   @id @default(uuid()) @map("_id")
  type      CropType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Milestone {
  id               String          @id @default(uuid()) @map("_id")
  Farmer           FarmerProfile[] @relation(fields: [farmerProfile], references: [id])
  farmerProfile    String[]
  text             String
  start_date       DateTime
  end_date         DateTime
  isAchieved       Boolean
  recommendation   Recommendation  @relation(fields: [recommendationId], references: [id])
  recommendationId String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  Project          Project?        @relation(fields: [projectId], references: [id])
  projectId        String?
}

model Report {
  id              String         @id @default(uuid()) @map("_id")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  WorkerProfile   WorkerProfile? @relation(fields: [workerProfileId], references: [id])
  workerProfileId String?        @unique
}

model HouseHold {
  id              String         @id @default(uuid()) @map("_id")
  size            Int
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  FarmerProfile   FarmerProfile? @relation(fields: [farmerProfileId], references: [id])
  farmerProfileId String?
}

model Recommendation {
  id        String      @id @default(uuid()) @map("_id")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Milestone Milestone[]
}

model Input {
  id        String    @id @default(uuid()) @map("_id")
  type      InputType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Disbursement {
  id              String         @id @default(uuid()) @map("_id")
  amount          Float
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  FarmerProfile   FarmerProfile? @relation(fields: [farmerProfileId], references: [id])
  farmerProfileId String?
}

enum UserType {
  ADMIN
  FARMER
  EXTENSION_WORKER
}

enum CropType {
  ADMIN
  FARMER
  EXTENSION_WORKER
}

enum Gender {
  MALE
  FEMALE
}

enum InputType {
  CASH
  FERTILIZER
}

enum Religion {
  CHRISTIAN
  MUSLIM
  NOT_SPECIFIED
}

enum Marital {
  MARRIED
  UNMARRIED
}

enum ProjectType {
  CROP
  LIVESTOCK
}

enum IncomeRange {
  SMALL
  MEDIUM
  COMMERCIAL
}
